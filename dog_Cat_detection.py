# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BjDfaArsqrZYHOSPX-I40Fu4zyuE_8yR
"""

!pip install opendatasets

import opendatasets as od
od.download('https://www.kaggle.com/datasets/salader/dogs-vs-cats')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping

train_ds = tf.keras.utils.image_dataset_from_directory(
    directory = '/content/dogs-vs-cats/train',
    labels = 'inferred',
    label_mode = 'int',
    batch_size = 32,
    image_size = (256,256)
)


validation_ds = tf.keras.utils.image_dataset_from_directory(
    directory = '/content/dogs-vs-cats/test',
    labels = 'inferred',
    label_mode = 'int',
    batch_size = 32,
    image_size = (256,256)
)

def process(image,labels):
  image = tf.cast(image/255.0,tf.float32)
  return image, labels


train_ds = train_ds.map(process)
validation_ds = validation_ds.map(process)

model = Sequential()

model.add(layers.Conv2D(32,(3,3),padding='same', activation='relu',input_shape=(256,256,3)))
model.add(layers.BatchNormalization())
model.add(layers.MaxPool2D((2,2)))
model.add(layers.Dropout(0.2))

model.add(layers.Conv2D(32,(3,3),padding='same', activation='relu'))
model.add(layers.BatchNormalization())
model.add(layers.MaxPool2D((2,2)))
model.add(layers.Dropout(0.3))

model.add(layers.Conv2D(32,(3,3),padding='same', activation='relu'))
model.add(layers.BatchNormalization())
model.add(layers.MaxPool2D((2,2)))
model.add(layers.Dropout(0.4))


model.add(layers.Flatten())

model.add(layers.Dense(128,activation='relu'))
model.add(layers.Dropout(0.3))
model.add(layers.Dense(64,activation='relu'))
model.add(layers.Dropout(0.2))

model.add(layers.Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer = tf.keras.optimizers.Adam(),
               loss='binary_crossentropy',
               metrics = ['accuracy'])

early_stopping = EarlyStopping(monitor='val_loss', patience=3)

model_history = model.fit(train_ds,
                          epochs = 30,
                          batch_size=64,
                          validation_data=validation_ds,
                          verbose=1,
                          callbacks=[early_stopping])

plt.figure(figsize=(10,4))

plt.subplot(1,2,1)
plt.plot(model_history.history['accuracy'],label=['training accuracy'])
plt.plot(model_history.history['val_accuracy'],label=['validation accuracy'])
plt.title('accuracy')
plt.xlabel('accuracy')
plt.ylabel('epoch')
plt.legend()

plt.subplot(1,2,2)
plt.plot(model_history.history['loss'],label=['training loss'])
plt.plot(model_history.history['val_loss'],label=['valodation accuracy'])
plt.title('loss')
plt.xlabel('loss')
plt.ylabel('epoch')
plt.legend()

plt.tight_layout()
plt.show()

from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
img_path = '/content/cat2.jpeg' # Replace with the path to your image
img = image.load_img(img_path, target_size=(256, 256))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = img_array / 255.0  # Normalize the image

# Make a prediction
prediction = model.predict(img_array)

# Interpret the prediction and display the image
plt.imshow(img)
plt.axis('off') # Hide axes
if prediction[0] > 0.5:
    plt.title("Prediction: Dog")
else:
    plt.title("Prediction: Cat")
plt.show()

